<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1010.1014                               -->
<workbook original-version='18.1' source-build='2024.3.0 (20243.24.1010.1014)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AnimationOnByDefault />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelExtractV2 />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Uber Request Data' inline='true' name='federated.193tvcb1blcldw1dqak8r0cimwns' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Uber Request Data' name='textscan.1wop34g1qaimq91b6lyun17hg2w9'>
            <connection class='textscan' directory='C:/Users/LENOVO/Downloads/Tableau &amp; Power BI Exam/Tableau &amp; Power BI Exam/Dataset' filename='Uber Request Data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1wop34g1qaimq91b6lyun17hg2w9' name='Uber Request Data.csv' table='[Uber Request Data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
            <column datatype='integer' name='Request id' ordinal='0' />
            <column datatype='string' name='Pickup point' ordinal='1' />
            <column datatype='integer' name='Driver id' ordinal='2' />
            <column datatype='string' name='Status' ordinal='3' />
            <column datatype='datetime' date-parse-format='dd-MM-yyyy HH:mm:ss|#|#|MM/dd/yy hh:mm a' name='Request timestamp' ordinal='4' />
            <column datatype='string' name='Drop timestamp' ordinal='5' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Uber Request Data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;â‚¹&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_IN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Request id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Request id]</local-name>
            <parent-name>[Uber Request Data.csv]</parent-name>
            <remote-alias>Request id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pickup point</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Pickup point]</local-name>
            <parent-name>[Uber Request Data.csv]</parent-name>
            <remote-alias>Pickup point</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Driver id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Driver id]</local-name>
            <parent-name>[Uber Request Data.csv]</parent-name>
            <remote-alias>Driver id</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Status</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Status]</local-name>
            <parent-name>[Uber Request Data.csv]</parent-name>
            <remote-alias>Status</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Request timestamp</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Request timestamp]</local-name>
            <parent-name>[Uber Request Data.csv]</parent-name>
            <remote-alias>Request timestamp</remote-alias>
            <ordinal>4</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Drop timestamp</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Drop timestamp]</local-name>
            <parent-name>[Uber Request Data.csv]</parent-name>
            <remote-alias>Drop timestamp</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Time Slot' datatype='string' name='[Calculation_1982709787499909120]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF DATEPART(&apos;hour&apos;, [Request timestamp]) &gt;= 0 AND DATEPART(&apos;hour&apos;, [Request timestamp]) &lt; 6 THEN &quot;Midnight - 6 AM&quot;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;, [Request timestamp]) &gt;= 6 AND DATEPART(&apos;hour&apos;, [Request timestamp]) &lt; 12 THEN &quot;6 AM - 12 PM&quot;&#13;&#10;ELSEIF DATEPART(&apos;hour&apos;, [Request timestamp]) &gt;= 12 AND DATEPART(&apos;hour&apos;, [Request timestamp]) &lt; 18 THEN &quot;12 PM - 6 PM&quot;&#13;&#10;ELSE &quot;6 PM - Midnight&quot;&#13;&#10;END' />
      </column>
      <column datatype='integer' name='[Driver id]' role='dimension' type='ordinal' />
      <column datatype='string' name='[Drop timestamp]' role='dimension' type='nominal' />
      <column datatype='string' name='[Pickup point]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Request id]' role='dimension' type='ordinal' />
      <column datatype='string' name='[Status]' role='dimension' type='nominal' />
      <column caption='Uber Request Data.csv' datatype='table' name='[__tableau_internal_object_id__].[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]' role='measure' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Driver id]' derivation='Count' name='[cnt:Driver id:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Drop timestamp]' derivation='Count' name='[cnt:Drop timestamp:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pickup point]' derivation='Count' name='[cnt:Pickup point:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Request id]' derivation='Count' name='[cnt:Request id:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Status]' derivation='Count' name='[cnt:Status:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Request id]' derivation='Count' forecast-column-base='[cnt:Request id:qk]' forecast-column-type='forecast-value' name='[fVal:cnt:Request id:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Status]' derivation='Count' forecast-column-base='[cnt:Status:qk]' forecast-column-type='forecast-value' name='[fVal:cnt:Status:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Drop timestamp]' derivation='None' name='[none:Drop timestamp:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Status]' derivation='None' name='[none:Status:nk]' pivot='key' type='nominal' />
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/LENOVO/AppData/Local/Temp/TableauTemp/#TableauTemp_03qe5xj05iowv51ep8x560m0qfcs.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='03/05/2025 10:30:11 AM' username='tableau_internal_user'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Request id</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Request id]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Request id</remote-alias>
              <ordinal>0</ordinal>
              <family>Uber Request Data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>6745</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Pickup point</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Pickup point]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Pickup point</remote-alias>
              <ordinal>1</ordinal>
              <family>Uber Request Data.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Driver id</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Driver id]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Driver id</remote-alias>
              <ordinal>2</ordinal>
              <family>Uber Request Data.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>420</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Status</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Status]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Status</remote-alias>
              <ordinal>3</ordinal>
              <family>Uber Request Data.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Request timestamp</remote-name>
              <remote-type>135</remote-type>
              <local-name>[Request timestamp]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Request timestamp</remote-alias>
              <ordinal>4</ordinal>
              <family>Uber Request Data.csv</family>
              <local-type>datetime</local-type>
              <aggregation>Year</aggregation>
              <approx-count>3392</approx-count>
              <contains-null>true</contains-null>
              <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Drop timestamp</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Drop timestamp]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Drop timestamp</remote-alias>
              <ordinal>5</ordinal>
              <family>Uber Request Data.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2000</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RGB' />
              <object-id>[Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' rowDisplayCount='100' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' palette='green_10_0' type='palette'>
            <map to='#24693d'>
              <bucket>&quot;[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Request id:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Driver id:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Pickup point:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.193tvcb1blcldw1dqak8r0cimwns].[fVal:cnt:Request id:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.193tvcb1blcldw1dqak8r0cimwns].[fVal:cnt:Status:qk]&quot;</bucket>
            </map>
            <map to='#b3e0a6'>
              <bucket>&quot;[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Drop timestamp:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.193tvcb1blcldw1dqak8r0cimwns].[__tableau_internal_object_id__].[cnt:Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.193tvcb1blcldw1dqak8r0cimwns]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Drop timestamp:nk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Status:nk]' palette='green_gold_10_0' type='palette'>
            <map to='#146c36'>
              <bucket>&quot;No Cars Available&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Trip Completed&quot;</bucket>
            </map>
            <map to='#f4d166'>
              <bucket>&quot;Cancelled&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <object-graph>
        <objects>
          <object caption='Uber Request Data.csv' id='Uber Request Data.csv_A8FC9441467344E9BF4C8362AD35922F'>
            <properties context=''>
              <relation connection='textscan.1wop34g1qaimq91b6lyun17hg2w9' name='Uber Request Data.csv' table='[Uber Request Data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
                  <column datatype='integer' name='Request id' ordinal='0' />
                  <column datatype='string' name='Pickup point' ordinal='1' />
                  <column datatype='integer' name='Driver id' ordinal='2' />
                  <column datatype='string' name='Status' ordinal='3' />
                  <column datatype='datetime' date-parse-format='dd-MM-yyyy HH:mm:ss|#|#|MM/dd/yy hh:mm a' name='Request timestamp' ordinal='4' />
                  <column datatype='string' name='Drop timestamp' ordinal='5' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Extra'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#000000' fontname='Arial Black'> The Major Time Slots When Demand is High</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Uber Request Data' name='federated.193tvcb1blcldw1dqak8r0cimwns' />
          </datasources>
          <datasource-dependencies datasource='federated.193tvcb1blcldw1dqak8r0cimwns'>
            <column datatype='integer' name='[Driver id]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Request id]' role='dimension' type='ordinal' />
            <column datatype='datetime' name='[Request timestamp]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Status]' role='dimension' type='nominal' />
            <column-instance column='[Request id]' derivation='Count' name='[cnt:Request id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Status]' derivation='Count' name='[cnt:Status:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Request id]' derivation='Count' forecast-column-base='[cnt:Request id:qk]' forecast-column-type='forecast-value' name='[fVal:cnt:Request id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Status]' derivation='Count' forecast-column-base='[cnt:Status:qk]' forecast-column-type='forecast-value' name='[fVal:cnt:Status:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Driver id]' derivation='None' name='[none:Driver id:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Request timestamp]' derivation='Hour-Trunc' name='[thr:Request timestamp:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Driver id:ok]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Driver id:ok]' member='1' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='2' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='3' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='4' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='5' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='6' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='7' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='8' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='9' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='10' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='11' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='12' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='13' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='14' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='15' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='16' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='17' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='18' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='19' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='20' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='21' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='22' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='23' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='24' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='25' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='26' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='27' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='28' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='29' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='30' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='31' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='32' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='33' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='34' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='35' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='36' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='37' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='38' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='39' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='40' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='41' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='42' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='43' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='44' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='45' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='46' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='47' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='48' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='49' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='50' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='51' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='52' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='53' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='54' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='55' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='56' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='57' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='58' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='59' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='60' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='61' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='62' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='63' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='64' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='65' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='66' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='67' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='68' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='69' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='70' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='71' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='72' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='73' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='74' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='75' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='76' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='77' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='78' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='79' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='80' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='81' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='82' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='83' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='84' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='85' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='86' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='87' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='88' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='89' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='90' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='91' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='92' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='93' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='94' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='95' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='96' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='97' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='98' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='99' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='100' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='101' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='102' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='103' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='104' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='105' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='106' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='107' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='108' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='109' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='110' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='111' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='112' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='113' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='114' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='115' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='116' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='117' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='118' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='119' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='120' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='121' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='122' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='123' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='124' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='125' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='126' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='127' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='128' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='129' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='130' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='131' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='132' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='133' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='134' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='135' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='136' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='137' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='138' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='139' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='140' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='141' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='142' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='143' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='144' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='145' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='146' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='147' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='148' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='149' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='150' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='151' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='152' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='153' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='154' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='155' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='156' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='157' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='158' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='159' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='160' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='161' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='162' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='163' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='164' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='165' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='166' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='167' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='168' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='169' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='170' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='171' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='172' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='173' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='174' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='175' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='176' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='177' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='178' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='179' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='180' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='181' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='182' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='183' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='184' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='185' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='186' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='187' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='188' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='189' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='190' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='191' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='192' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='193' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='194' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='195' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='196' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='197' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='198' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='199' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='200' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='201' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='202' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='203' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='204' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='205' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='206' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='207' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='208' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='209' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='210' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='211' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='212' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='213' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='214' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='215' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='216' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='217' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='218' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='219' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='220' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='221' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='222' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='223' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='224' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='225' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='226' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='227' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='228' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='229' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='230' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='231' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='232' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='233' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='234' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='235' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='236' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='237' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='238' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='239' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='240' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='241' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='242' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='243' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='244' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='245' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='246' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='247' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='248' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='249' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='250' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='251' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='252' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='253' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='254' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='255' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='256' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='257' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='258' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='259' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='260' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='261' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='262' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='263' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='264' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='265' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='266' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='267' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='268' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='269' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='270' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='271' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='272' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='273' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='274' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='275' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='276' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='277' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='278' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='279' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='280' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='281' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='282' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='283' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='284' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='285' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='286' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='287' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='288' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='289' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='290' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='291' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='292' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='293' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='294' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='295' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='296' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='297' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='298' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='299' />
              <groupfilter function='member' level='[none:Driver id:ok]' member='300' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.193tvcb1blcldw1dqak8r0cimwns].[thr:Request timestamp:ok]' direction='ASC'>
            <dictionary>
              <bucket>#2016-07-14 08:00:00#</bucket>
              <bucket>#2016-11-07 05:00:00#</bucket>
              <bucket>#2016-12-07 09:00:00#</bucket>
              <bucket>#2016-11-07 09:00:00#</bucket>
              <bucket>#2016-07-14 05:00:00#</bucket>
              <bucket>#2016-07-13 07:00:00#</bucket>
              <bucket>#2016-07-15 07:00:00#</bucket>
              <bucket>#2016-07-13 06:00:00#</bucket>
              <bucket>#2016-07-13 05:00:00#</bucket>
              <bucket>#2016-07-15 05:00:00#</bucket>
              <bucket>#2016-11-07 06:00:00#</bucket>
              <bucket>#2016-07-15 08:00:00#</bucket>
              <bucket>#2016-12-07 07:00:00#</bucket>
              <bucket>#2016-11-07 08:00:00#</bucket>
              <bucket>#2016-07-14 09:00:00#</bucket>
              <bucket>#2016-07-13 09:00:00#</bucket>
              <bucket>#2016-12-07 06:00:00#</bucket>
              <bucket>#2016-11-07 07:00:00#</bucket>
              <bucket>#2016-12-07 05:00:00#</bucket>
              <bucket>#2016-07-15 09:00:00#</bucket>
              <bucket>#2016-07-13 08:00:00#</bucket>
              <bucket>#2016-07-14 07:00:00#</bucket>
              <bucket>#2016-12-07 08:00:00#</bucket>
              <bucket>#2016-07-14 06:00:00#</bucket>
              <bucket>#2016-07-15 06:00:00#</bucket>
              <bucket>#2016-07-14 18:00:00#</bucket>
              <bucket>#2016-12-07 20:00:00#</bucket>
              <bucket>#2016-07-13 17:00:00#</bucket>
              <bucket>#2016-11-07 20:00:00#</bucket>
              <bucket>#2016-11-07 19:00:00#</bucket>
              <bucket>#2016-07-15 20:00:00#</bucket>
              <bucket>#2016-07-15 10:00:00#</bucket>
              <bucket>#2016-12-07 21:00:00#</bucket>
              <bucket>#2016-07-15 22:00:00#</bucket>
              <bucket>#2016-11-07 22:00:00#</bucket>
              <bucket>#2016-11-07 12:00:00#</bucket>
              <bucket>#2016-07-15 18:00:00#</bucket>
              <bucket>#2016-07-13 22:00:00#</bucket>
              <bucket>#2016-07-13 10:00:00#</bucket>
              <bucket>#2016-12-07 10:00:00#</bucket>
              <bucket>#2016-11-07 17:00:00#</bucket>
              <bucket>#2016-07-15 19:00:00#</bucket>
              <bucket>#2016-07-13 20:00:00#</bucket>
              <bucket>#2016-07-15 21:00:00#</bucket>
              <bucket>#2016-07-13 19:00:00#</bucket>
              <bucket>#2016-12-07 19:00:00#</bucket>
              <bucket>#2016-07-14 17:00:00#</bucket>
              <bucket>#2016-11-07 18:00:00#</bucket>
              <bucket>#2016-11-07 10:00:00#</bucket>
              <bucket>#2016-07-13 21:00:00#</bucket>
              <bucket>#2016-11-07 21:00:00#</bucket>
              <bucket>#2016-07-14 20:00:00#</bucket>
              <bucket>#2016-12-07 17:00:00#</bucket>
              <bucket>#2016-12-07 11:00:00#</bucket>
              <bucket>#2016-07-14 21:00:00#</bucket>
              <bucket>#2016-07-14 19:00:00#</bucket>
              <bucket>#2016-12-07 18:00:00#</bucket>
              <bucket>#2016-07-15 17:00:00#</bucket>
              <bucket>#2016-07-14 13:00:00#</bucket>
              <bucket>#2016-07-13 18:00:00#</bucket>
              <bucket>#2016-11-07 11:00:00#</bucket>
              <bucket>#2016-07-13 23:00:00#</bucket>
              <bucket>#2016-07-13 04:00:00#</bucket>
              <bucket>#2016-11-07 16:00:00#</bucket>
              <bucket>#2016-07-15 23:00:00#</bucket>
              <bucket>#2016-07-13 12:00:00#</bucket>
              <bucket>#2016-12-07 16:00:00#</bucket>
              <bucket>#2016-12-07 15:00:00#</bucket>
              <bucket>#2016-12-07 04:00:00#</bucket>
              <bucket>#2016-11-07 15:00:00#</bucket>
              <bucket>#2016-07-14 11:00:00#</bucket>
              <bucket>#2016-07-14 04:00:00#</bucket>
              <bucket>#2016-12-07 22:00:00#</bucket>
              <bucket>#2016-12-07 12:00:00#</bucket>
              <bucket>#2016-07-14 15:00:00#</bucket>
              <bucket>#2016-07-13 15:00:00#</bucket>
              <bucket>#2016-12-07 14:00:00#</bucket>
              <bucket>#2016-11-07 04:00:00#</bucket>
              <bucket>#2016-07-14 12:00:00#</bucket>
              <bucket>#2016-11-07 23:00:00#</bucket>
              <bucket>#2016-07-15 12:00:00#</bucket>
              <bucket>#2016-07-15 04:00:00#</bucket>
              <bucket>#2016-07-13 16:00:00#</bucket>
              <bucket>#2016-11-07 14:00:00#</bucket>
              <bucket>#2016-11-07 13:00:00#</bucket>
              <bucket>#2016-07-14 10:00:00#</bucket>
              <bucket>#2016-07-13 11:00:00#</bucket>
              <bucket>#2016-07-15 15:00:00#</bucket>
              <bucket>#2016-07-15 14:00:00#</bucket>
              <bucket>#2016-07-14 22:00:00#</bucket>
              <bucket>#2016-07-14 16:00:00#</bucket>
              <bucket>#2016-12-07 13:00:00#</bucket>
              <bucket>#2016-07-15 11:00:00#</bucket>
              <bucket>#2016-07-13 14:00:00#</bucket>
              <bucket>#2016-07-13 13:00:00#</bucket>
              <bucket>#2016-07-15 13:00:00#</bucket>
              <bucket>#2016-07-14 23:00:00#</bucket>
              <bucket>#2016-07-14 14:00:00#</bucket>
              <bucket>#2016-12-07 23:00:00#</bucket>
              <bucket>#2016-07-15 16:00:00#</bucket>
              <bucket>#2016-07-15 02:00:00#</bucket>
              <bucket>#2016-07-14 00:00:00#</bucket>
              <bucket>#2016-07-15 00:00:00#</bucket>
              <bucket>#2016-07-14 02:00:00#</bucket>
              <bucket>#2016-07-13 03:00:00#</bucket>
              <bucket>#2016-07-13 02:00:00#</bucket>
              <bucket>#2016-11-07 00:00:00#</bucket>
              <bucket>#2016-07-13 01:00:00#</bucket>
              <bucket>#2016-12-07 01:00:00#</bucket>
              <bucket>#2016-11-07 03:00:00#</bucket>
              <bucket>#2016-07-14 03:00:00#</bucket>
              <bucket>#2016-12-07 03:00:00#</bucket>
              <bucket>#2016-12-07 00:00:00#</bucket>
              <bucket>#2016-07-15 03:00:00#</bucket>
              <bucket>#2016-07-13 00:00:00#</bucket>
              <bucket>#2016-11-07 02:00:00#</bucket>
              <bucket>#2016-07-15 01:00:00#</bucket>
              <bucket>#2016-07-14 01:00:00#</bucket>
              <bucket>#2016-12-07 02:00:00#</bucket>
              <bucket>#2016-11-07 01:00:00#</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Driver id:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.193tvcb1blcldw1dqak8r0cimwns].[fVal:cnt:Request id:qk]' scope='rows' value='Request id' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.193tvcb1blcldw1dqak8r0cimwns].[fVal:cnt:Status:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#b07aa1' />
                <format attr='mark-transparency' value='167' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.193tvcb1blcldw1dqak8r0cimwns].[fVal:cnt:Request id:qk]</rows>
        <cols>[federated.193tvcb1blcldw1dqak8r0cimwns].[thr:Request timestamp:ok]</cols>
        <forecast-specification auto-forecast-agg='true' band-confidence-level='95.000000' enabled='true' fill-type='fill-missing' ignore-last='1' model-type='auto-season' range-type='auto' show-prediction-bands='true' />
      </table>
      <simple-id uuid='{6CC7E7D6-317C-4707-81A5-42F6BF5103C1}' />
    </worksheet>
    <worksheet name='Factors Impacting Incomplete Requests (Q2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#000000' fontname='Arial'> Factors That Impact Incomplete Requests</run>
            <run>Ã†&#10;&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Uber Request Data' name='federated.193tvcb1blcldw1dqak8r0cimwns' />
          </datasources>
          <datasource-dependencies datasource='federated.193tvcb1blcldw1dqak8r0cimwns'>
            <column datatype='string' name='[Pickup point]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Request id]' role='dimension' type='ordinal' />
            <column datatype='datetime' name='[Request timestamp]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Status]' role='dimension' type='nominal' />
            <column-instance column='[Request id]' derivation='Count' name='[cnt:Request id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Request timestamp]' derivation='Hour' name='[hr:Request timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Pickup point]' derivation='None' name='[none:Pickup point:nk]' pivot='key' type='nominal' />
            <column-instance column='[Status]' derivation='None' name='[none:Status:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Status:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Status:nk]' member='&quot;Cancelled&quot;' />
              <groupfilter function='member' level='[none:Status:nk]' member='&quot;No Cars Available&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.193tvcb1blcldw1dqak8r0cimwns].[hr:Request timestamp:ok]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Request id:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Status:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Request id:qk]' scope='rows' value='Request id' />
            <format attr='width' field='[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Request id:qk]' value='92' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.193tvcb1blcldw1dqak8r0cimwns].[hr:Request timestamp:ok]' value='39' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Request id:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#f1deda</color>
                <color>#f2cac4</color>
                <color>#f2b7ad</color>
                <color>#f3a496</color>
                <color>#f4917f</color>
                <color>#f47d68</color>
                <color>#f56a51</color>
                <color>#f5563a</color>
                <color>#f64223</color>
                <color>#f72f0c</color>
              </color-palette>
            </encoding>
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.193tvcb1blcldw1dqak8r0cimwns].[none:Pickup point:nk] * [federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Request id:qk])</rows>
        <cols>[federated.193tvcb1blcldw1dqak8r0cimwns].[hr:Request timestamp:ok]</cols>
      </table>
      <simple-id uuid='{69387689-6575-44F7-8C77-D3CEA02D0DDB}' />
    </worksheet>
    <worksheet name='Supply vs Demand Chart (Q3)'>
      <table>
        <view>
          <datasources>
            <datasource caption='Uber Request Data' name='federated.193tvcb1blcldw1dqak8r0cimwns' />
          </datasources>
          <datasource-dependencies datasource='federated.193tvcb1blcldw1dqak8r0cimwns'>
            <column datatype='string' name='[Drop timestamp]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Request id]' role='dimension' type='ordinal' />
            <column datatype='datetime' name='[Request timestamp]' role='dimension' type='ordinal' />
            <column-instance column='[Drop timestamp]' derivation='Count' name='[cnt:Drop timestamp:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Request id]' derivation='Count' name='[cnt:Request id:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Request timestamp]' derivation='Hour-Trunc' name='[thr:Request timestamp:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.193tvcb1blcldw1dqak8r0cimwns].[thr:Request timestamp:ok]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Drop timestamp:qk]' shelf='rows' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='pane'>
            <format attr='band-color' scope='cols' value='#ffffff' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-level' scope='rows' value='0' />
            <format attr='band-size' scope='cols' value='1' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Drop timestamp:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Request id:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
          </pane>
        </panes>
        <rows>[federated.193tvcb1blcldw1dqak8r0cimwns].[thr:Request timestamp:ok]</rows>
        <cols>([federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Drop timestamp:qk] + [federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Request id:qk])</cols>
      </table>
      <simple-id uuid='{75472679-E1E4-4A13-B29A-1A343ED3CC6C}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' maximized='true' name='Factors Impacting Incomplete Requests (Q2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Status:nk]' type='filter' />
            <card pane-specification-id='4' param='[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[:Measure Names]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Drop timestamp:qk]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[cnt:Pickup point:qk]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[dy:Request timestamp:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[hr:Request timestamp:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Driver id:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Drop timestamp:nk]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Pickup point:nk]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Request id:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Request timestamp:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Status:nk]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[qr:Request timestamp:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[thr:Request timestamp:qk]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[wd:Request timestamp:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[yr:Request timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{83840062-35C8-435C-9DA5-37E5BEA8AC2B}' />
    </window>
    <window class='worksheet' name='Supply vs Demand Chart (Q3)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[:Measure Names]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Drop timestamp:nk]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Request id:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[yr:Request timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F29F89A5-913B-46DD-8B1D-62E0DD9FBE96}' />
    </window>
    <window class='worksheet' name='Extra'>
      <cards>
        <edge name='left'>
          <strip size='140'>
            <card size='12' type='pages' />
            <card size='88' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Driver id:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.193tvcb1blcldw1dqak8r0cimwns].[fVal:cnt:Status:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[fVal:cnt:Status:qk]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[hr:Request timestamp:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Forecast Indicator:nk]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[none:Request id:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[thr:Request timestamp:ok]</field>
            <field>[federated.193tvcb1blcldw1dqak8r0cimwns].[yr:Request timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8D3BFA08-B857-4816-BCC4-40740756EEB8}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Extra' width='192'>
      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
      /3bw/wNOH7q4XcSI7wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Factors Impacting Incomplete Requests (Q2)' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAb+UlEQVR4nO2daYwk53nff1XVd/fcR/fc98yeXHKXFJcUDdKyKEq2JAq25SixYdgBZME2
      jMgG7ABKECifggACAhtxEMWxoVAG7BCELQmOLQuiRJqXSJF779z3PdPT18z0VWc+zGzPUmRX
      9wxnpre739+X7d566u3/VNe/q+p9n/d5JcuyLASCKkUutQCBoJRUpAF0XSebzZZahqAMqEgD
      mKaJruulliE4IUxdZXNzk51k+iO3VZEGEFQ2qeVbfOfHN/je3/8dyazG3NQk26ksO7EwU7Pz
      7GwnSCQzRCIR9GyKyckpVN1gcXaKcCzOSy98i8nldUxTxVHqP0YgOArb8QjegJOpt3/AWzNR
      nO5b+EyNnmYXS3M+jPphwpPv0KBkCWd0rt8eI7G9w3PPfRJNNaitq0GSFGEAQXnS091FcmsJ
      TTcYvvgxznUH+NH3X0XTNBSfi1g0zE4qS0ODi8ee+gT1PgdbK8u8/OM3CNX50DQDSVKQKrEb
      VFVVNE3D7/eXWorgBDDUFLuqgsNIYrn8RNaWCDSGcBhJ3nvzFZof+gS15i6eQC0tdT7mFlcI
      tncQ3Vgl0BjE7zDY2lHpDLUcGCCVSqGqaon/tONB13UMw8DtdpdaiuCU0TUVZAcOpbjHW3EF
      EFQ1ohdIUNUIAwiqmoruBbL0XSzTfkRYcjYgSeJ3oFqpaAOo699Bj75mG+M79w1w1JySIsGD
      hvjpE1Q1wgCCqqaib4EWt7OsbSRtY66esXCdkh7Bg0eZGcBiZWGGpOFmsK+T5bkpAs2d1Htl
      JmcW6B8cwuU4uKj9z5ubvPDmlG2LY1d1mvcdYJk6YDMsIklIUpkdMoEtZfdt1jWFUJfmmJvY
      RmroYHl2mjXZpKe/l4mpeS6e7T9y26mxfw/Gbt7tsm8Q7+AfH7l9wYNHmRlAIrMTZS22S6O/
      lvbmWsyIkzTg9wdwWGFM08Q0TQzDwLTMgi3qunHf3AH7QXHLssQ8gwqjzAygsbEZwyFBTXMN
      d376Hm5fDUE/XLt2g/rWbmRZRpZlFEVBLqJ/3+FQcDj2DkMWyTZWkqRcrKAyKLNv08n5S5dy
      7zo6unOvO0shR1D2iG5QQVVTZleABwdL38HYnbCNkb1dyO4gAHrsbfSdu7bx7vZfQ3IEjk2j
      oDDCAEfEzKyTXfwL2xhX2xeRW/YMYKTnMeJv28ZboeeREAY4TYQB7uNPr62Tymzn3d4TqufL
      g6coSHDiCAPcx/+5GyaaTOTd/vhuG18+RT2Ck0cY4JT49t0tvvfutG3M/+7RaRV5GaeKMMAp
      Mbed5a3V/KPMAFmj8MCd4HgR3aCCqqbsDLC6MMPdsSl0Pc3N964zObdMNpng9p277Ga0UssT
      lBlldwtU09iKoS2zuTzPlqpwpaWJmdkphof6mZpb5MLZgVPRcWsrxVdeHLON+epnovybllOR
      IzgiZWeAncg6GUcNA91tNAaz3L09ijvgw+V2o2B+xGQ4e+5PhktmNeYS9vONY2k1F2+ZhavP
      HEaL4HgoMwOoTE7N0xhsJxZ1sry8huTx0Vzj4tq1m7R0DHykZLhC3J8MpyhKwXhZlnPxkmyf
      aHdYLYLjocyOtotnnn02966pOZh7HeoqhR5BuVN2D8ECwXFSZlcAwYdhZtbJrvy1bYyz8Skc
      DVdPSVH5IAxQAVhmBjNpP/fZDJw7JTXlhbgFElQ1wgCCqkYYQFDVlOQZwNQ1/vE7f8tW0sKh
      wCNPforz/aFSSKkI7myl+exf3bSN+ZNfeoI/eNY2pCopiQFkh5NPffITvDa2yeX+eiZXE4Aw
      wFExLYuMYT/SrBcxEl2NlOwWyFXXRrMjxTs3ZxgZKb6Y1ezEXW7cuktWzXD7xnXmlzdJxja5
      fuMGsZ3MCSoWVCIlugVSeeP1V1leWiKtwcpGhPq+4q4AXf3DrM5NMTc2QXD4ApHZSWbjFg9d
      OMP45DL1+8lwlmUVKHPFftxebLHciy12n1xcEeGWZR1Ky2E47N9ZLZToFsjFzz1ztBvSlfkp
      5JoW6qUIDoeMIkvoSMiygiTtnUCmaRZ9Mt1LnisGCysXaxbR9j0t914fp5af3a+wlqO1XemU
      bCBMTcbYSksE6zyshWN0trcVsxcrK2FqGi36BzqZuHUdf0MrHX64duM27T1DuWQ4WZaRpcIJ
      aIoiF5XYBiAh5WIVufDdoyQdxBeTDKcoStFa7kcuQsu9BEHB+ymZAW689TKvj2/R2drApau/
      UOReLj7+zNO5d1cefTT3ujHU/WE7CAS2lMwAl5/8BK72LeZvvklRN8gCwQlQsl4gy9C4/tr3
      aRx8mHgkUioZgiqnZFcAZ6CV5z79i3jrgzhdnlLJEFQ5H3oFuP7mK8QyJqmdbbJ6ET0HlslG
      eOtQH6zubPDqy//EwlaC0bHJQ+0rEBwXH7gCGJkYnuYO1hYWqXHr1NUnefPmIkPdzSxHEzgc
      Hpp9EN1J0xwMsTK/QEuwmdHxKa5+/GlaG4qrbenw1lFXU8NPfvwyz332C8f+hwkExfCBK8Dq
      4hLxxA4bm+touo5pmnT0jdDgd9M1MIJXsdjOGDx08TzbsTANwS4G+vvp6e2jpd5f9AcbukrG
      cuJTMmyE85cjFAhOkg9cAdy1QR4fChIPb6DJMh6vmybFBdkdZidH6enqpc6pc3d0kv7BYbJZ
      HUlSqHHBViJJS31xVwBJdtDU1ILXFwDLvrqCQHBSfMAAraG9ieaNrQcTzj1e0NINXL4Uwu92
      AnCpeW/gqmb/R79/+HAzjiRJJlBbiztQT4MHdtMaAa/zSH+EQHBUiu4GdXoDuZP/ODAycRbX
      ohiZBNdu3CWrG0Xtl96JsRGJg6Vy+/oNJueW0TK7jI6OkVaLa0MguEfJxgEc3lrI7rCxGeWR
      q0/RVFNcV2h0K8x6eAstvkrc8tIeamF6aoa+3g5mZhZOWLWg0ijZOIDs8NIVbCB05goep7fo
      /do6OojPr6PUdnChd5vx23fwBnx4vD4Uyzi1ynCGUfhqY5rmqVSGO6wWwQElM0A2scba5jpW
      Sxw9uUrzoxeL2MtgamyMpc0ETTU+NjY2sJxu6n0K167doLGttyorwx1Wi+CAkh0RV22QlqYm
      pm/d5Oef+3SReymMXHqUkf13obaDDNKO3uNWKKgGSvIMYJk63//uS0yupmmtlVjfEuMAgtJQ
      EgMYWhZXXQtPDNeyaQUZ6WouhQyBoDQGkB0uZDXJ2FoGv77FWiT/yowCwUlSmimRipOf//Tn
      S/HRAsH7EIWxBFWNMICgqhEGEFQ1wgCCqqbsDBDbXGFxbQtMjbHbN1laj5DejnDz1i0SSbXU
      8gRlRtmNjRumSWI7wVYmQl3vGeLzU8Qli3NnBpmYXqT2kMukWhytMtyJxJ9w9bZKqAyX3fh/
      mGo073bZ4cfd9stFt1d2BmhsbGRjex1NB5/HSVJRMACH04lyX2W4YpPhDMMoKpkM9k6ge7HF
      JqDdiysmGe4wWn52v8NoKWc+862/5c5K/tVwOhtC/PQ/PV90e2VmAIOp8QnWIzu0P3yBqRvX
      8NU10eaXuHb9FqGuwcMnwykPTjKcIpLhClOg2t/931ExlNkRURh56HIuGe6xx5pyW5pFNpzg
      CJTdQ7BAcJwIAwiqGmEAQVUjDCCoaoQBBFWNMICgqhEGEFQ1wgCCqqZ8DWBpjN68xeTcMqaW
      YXx8ArWYUu4CwX2UrQH0xCq7jjq62oNMjI3T2RlkYmq+1LIEZUaZpUIcIPmDdNZvcfvmbfwB
      L35/AIcVFpXhitBS1hTIaL3/OyqGsjVANrVLOLyFJSvUuCWuXbtBfWu3qAxXhJayprqT4Q7w
      1TVz6eGDekJikVTBUSjbZwCB4DgQBhBUNcIAgqpGGEBQ1ZTtQ7BAUAhL3yG7+qJtTEUYILq2
      yNzaFu3dg7Q115ZajuABwTKzGPF3bGMqwgAbsV0uP3yR8Yl5YYATIDP3Z5jqVt7tsqsFT98f
      nKKi4sjqJj9Z27WNqQgDWKaJaRqYVuHBJsHhMdUtrOxG/u0cHHfLMsEsUKBMciDJe6eeZepg
      FRi5lV1IRQxq/iybKY0v/cO0bUxFGKC3M8itOxP0Do4UDi4TtMhrYGbybpccNTgarh65bb3A
      rYG767eQXXtVN/7olUVWIkt5Y7uaVf7H/qG3suukJ/+zbdvO1s/gCn1hT0v4n9E2vmcb7xn8
      Dyi+kxnqrAgD+OpbeOThllLLOFZ+5a/+lPXEZt7tZ9qHeeH3jmaAv3hvjG/9y3dtY178d79K
      b8ueAW5uJpnezH8rETVTudfziSxfenHMtu3ffvpRfje09/rbo1t882X7+Bd+L8MZn23IkZGs
      /Xp5qVQKVa2M2pq6ru8liCkSmmF/efW7vEj7+SXJbBqL/MlWiiTjde2tZ2yYJmkt/y80gNvh
      wqns/cZkdfVQWlJqGtMm8et+LaZpkiqgxaU4cTn2FjpXdQ3V0GzjfS5PLpcqpWZsEwtlScZ3
      T4tlklJPTktazWDYapHwubz7WixSatq27ZwBKglVVdE0Db/fX2opggccMRAmqGqEAQRVjTCA
      oKoRBhBUNcIAgqpGGEBQ1QgDCKqaMhsJtpi8e4tIIsXAQDfTc6t4fDW0+mEjvkt9azcDXa2l
      FikoI8rMABKNjQ1sxlIkwgkuPHaFzYkJYlm4fPlhxsfmMM3mXFmUiigDIjhRyswAOu5AM73B
      bbbTGltb26RUDUU2SSZ30SXlfWVRKqIMiOBEKbMzRCG2uUxGrmHkQjcrc1N09g9S55WYmllk
      ZGio1AIFZYbIBRJUNaIXSFDVCAMIqhphAEFVIwwgqGqEAQRVjTCAoKops3GA6kFd/y6Wkcy7
      XXI24mr99CkqqkzKzgCamkHVLXxeN8ndJJLixOd1kUqm8fp9yAUWUCgX9NhbWFos73bZ2w3C
      AB+ZsjPA0sIc24ldOrtaGJvfpb8nxObSOllLRnLXM9LXXmqJDzzG7jhGcsY2xtn0NJIjcEqK
      SkfZGaA9FCKRWsbrrcHvjrO2to7P7eDs2UEmxubet0ZYOSfDFRqfP+xaWPejJ+5iRH5gHxS4
      hIznSO2XE2VmAIObd8YZOXce09Tp7OxiaW4B2WWysbGO6XRXTDKcKmFToejwa2HdjynLFFpW
      z6EoyGV8/Iql7P7CjrY2YtE47Z1t7GysMXTuHDUehdW1MMMDHaWWV5FkFr6JpUbzbpdcTXh6
      fucUFR0fZWYAhc7e3ty79s6DepEdneLe/6QwMyu2xXElmxqmDzpiHEBQ1QgDCKoaYQBBVVNm
      zwCCBx1TjaKu/I1tjKP+Sm5tAz3+U/SY/VoFrvZfQ3afTPl7YQDB8WJmMHZu2YbI3oPeOjO7
      WTDeMj53LNI+jJIYwDINFuZmUPc7o1vaumio8ZZCiqDKKdkVILY6zd0Ng/6gj61diycvV87y
      RoLyoSQPwZKscOnqMwRIs7YWprG5qeh9k9tRVje2sCzY2lgjmVaxDI2VlVV0s+Lm9wtOmJJc
      AUxDZ3pmllAoSMaAGq+z6H1jiR0yO9ss7ERISn7UtQn8TouaxkYmZ5Y4N3Qyi6kJKpOSGECS
      ZOrqG3E6PRgW+D2uovet9bmJJBzUadA93M7mxA4pJIZCIRIiGa4oTDP/Glv30A0D+V77BcWQ
      02IahbKMwDQPtBejxTB0rBP6LktjAFmmpbmZbAN4nArprP0iaQfovHftDr2DQzQEZCbujCNb
      FvVei4mJSSRvvUiGK4LDJsOpheZYSOS0mLpCoW9Tlg+0F6NFURwoJ/RdluwMGX3nZX4yk6Cz
      0UNd5wWeuDRYxF4yjz3+MUwk/AE/5/1pHC4PDkUimUzhE4WwBIekZAboGjzHtjMO6QgjA8Xe
      t8sEamtz77y+gxM+EKj8yRuC46dkqRAep0JqZ431WJbJiclSyRBUOSW7ArjqgtS653nk4TNo
      VTDzSPBg8oErgGloTE+MsrweIR6PY2gqxgl0r5tahvmJ66zEs8Qi+Sd/CwQnyQcMsDQzQW2o
      l2BTLZlshtG3X+XtWxOsrK1jmhqb4fwzgw6DqWUxLZN333qDXbVw15lAcBJ8wAAZ1aQ24MXp
      dBIOh2lpCTF0ZgTS2yzOzmC4j+lhU3Gi4yC2sYrPJ/KABKXhAwboaG/l9vVrzC2t43Q68dfX
      MDc+TmtXJzPLUdpqix+0ssPhDvD5X/11fvNLnyeb3DmWNgWCw/KBh+BAY4jHGkP77/b+/VgQ
      YhtLDBzjCiyGmuadt14na8hcefKZY2tXIDgMRXeDNgS76O04xkkJRpbVtTDRrTX+/v/+DYvh
      4q4ClmXtD5/vDafrhpFLC6jAxW4EJ0zJukEty8DfFGQgVEPWE6K7paao/WbHrhMza7gyUMur
      7yzS19eBIxsnmszib2hjqCdUuBGBYJ+SGcAZaOWJi/1E0jKXhgeK3q9vcITM/Dqa4aCuxkk8
      nsDjkLl06eJ+ZbhWkQxXAJEMd0DJDKAlt/jRD/6RC5/8V4yNTvPIQ8NF7GWhazq6rqMZMkPD
      w8yMjWFJDuLxGLriFMlwRSCS4e7TciKtFvPBDhcej5vXX/5nXDUNRe5lsby8ihMDw+klur5M
      35mznDt3lmh0h5HBnhPVLKg8SvMTaVlMjo7SMPAYT3XVElbVIneU6R85m3tXO3hw1RgY6D9m
      kYJqoCRXAENLsxxN0eHY5u/+ZYzhvrZSyBAISvUMILEyfYtZHQzZz/TSJuf7RO+N4PQpiQEU
      l5ff+spXS/HRAsH7EKURBVWNMICgqhEGEFQ1wgCCqqbsDGAaGunM3rjBdjxKRtWxTJ1IJIIh
      KsMJDknZ5QrMT94lZvk52+phNqxiZlepdVsoXh+b8TRnBzpLLVHwgGCqMTJz/802puwM0Dsw
      RHp+nWgkxcDwEJsTEyQtiYs9PWKZ1CKplmQ4S8/arm0GZWcAk0g4TCwapb2nldmpOQzVoNZt
      sbCwgOX2imS4IqiWZDjTLLxPmZ0hErLTy1BfN97GZvo8CVz+HtwOiEQTdDU2llqgoMwoOwM0
      tQZz7zwNByd88yFKrJcDSc3EsKmW4XSYiFICH50yM0D18OxL46zE8t+/PtSl8fK5UxRUoQgD
      VCE/WtrmlesrtjF/1KXTegoF+14Y3eKbPxy1jfn276c54zuZzxcGqELeXU/yl3fCtjH/9nmD
      1v3XP1xIsL2TvyBaXa2Pzx1xhatEVmd+234+SPYkShPuIwwgKMh/eXuV6c3FvNuHgzKfe/YU
      BR0jZTcSLBAcJ8IAgqpG3AIJjpWsYTEVy9jGBGt0HpRJsMIAgmNlYTvLsy+N28b84XNP8LW+
      UxJUgLI1gJXZ5OU3Z+nu68Rn7rIR36W+tZuBrtbCOwuqAtOyiGftc4jK1gCaBnV1HtKpFIZk
      cfnyw4yPzWGazRWSDFcwG+5Ek+EMQ8+1XzgX7kCLUVQynHnIZLijfZcL8TRXX7hjG1O2BjBw
      c/7COSZu3cZwKySTu+iSUjHJcFLBBLSjJ8PJcuG+D0Vx5NovnAt3oEVRlKI+/158cVoOvsvM
      3H/HzKzm1+JswDv4x8BeQl8hyvYMcft8TE9O0jk4TFPAyeTMAiPHWL5d8GBiaXEsLXJs7ZWt
      AWTFyfDZ87n3Z84ccShSUFa8OBlhI5o/R6rOb/GVs3k3f4CyNYDgAMtIY6RmbWNkVyuy+xjX
      dygR37q7xZ3ltbzbuxrhK79SfHvCABWAmd0gO/dntjHO4PO4gr94SorKB2GA+9DCP8Qy8ydm
      Sa5GnA1XAbDMLFbWPqFMctYhOYpb+ENQGiraAGZmFVOzX4NY8Y8gyftT/zb/CYzdvLGybzBn
      ADO1SGb2G7Ztu9q+iLPlk3ttb/wDevQN23jP4J8gO4stFS84DirCAHomyeTsIn2Dw3hdB11f
      2taP0KOv2e7rO/cNkE/+V9oyklhagTWWrcJ94h+GblpE0vb95HW6yfGs71lZVIQBpqam6R3o
      Y2ZmgQtnj75OwF/e3iSV3c67vbO1kd8YPFrbry3v8O7Yum3M7/Yb1B3hLB2NpPnUX9sP+Hzt
      s0/xhx2Hb7vSqQgDSIoLr9eHYr1/FPK/vrPKS+/ctd33lf+o07i/9vef39ggmkzkjX28P8hv
      fGbv9fx2lj9/fcm27ec/vsPT+x0vP17a5n+9a2+AX/+cQZ1thOC4qQgD1PoUrl27QWNb7/v+
      P5E1WEvaF+kwj7i06mZK49tj9gMyQ2fSPH2k1gWnRUUYoL13mPbeUqsQlCM5A6RSKdSi1+p6
      sNF1HcMw+IWhx+mssc8O1TMaMT2GJEl89ZnfJKNn88YGa5uJx+NYlkWjs4avPfc7tm0/FBzK
      xT/dd4Vmt/0NjqRZxGJ7Wn7/5/41u9lU3tjmQEOu7RrFW1DLlfazufgnui/hLxDvNpWcli8/
      +UUS6fwLmdd7a3NteyxHQS2Xus7k4h9tP18wPiB5clp++2NfIHI+nj/W7c+1LesUbFuyKnB5
      dVVV0TQNv99fVLxhGEUlcR0l/t7K9sXGV4uWw8afVNvCAIKqRvn617/+9VKLOG4Mw8A0TVyu
      vT7F6MYyb18fo6ezlevvvcfSwgKBYCce5UPyfE2dybFRZmemULwBRu/cJhxPEmr98Mpz2WSC
      u6MTLKxuEnCY/OTdO3T1duWdbB0Lr/L2e3fp6gxy+/o1ZueXaG5rxynnzzmen7rL3OISO1lo
      qs8/ZqFrad559XWczW3shpeYnZ1hfm2bzrbmvPugxXnl9etkDJPmxvr8cfssTo8zOzdP0lBo
      rAvYB5s6k+NjTI7exvQHqffb9/FaeoabN24RT6r2WiyLuakxZmemkdx+5iYnmFtaIRhqQ/mQ
      42iZKtfefAPNXY+5s8HtiWlS6t6xrIpJ8Q2tHTTV+UCSsCwTwzTJe75JCgNDQ3g9XjKJMP3n
      ruBW8k/ycPlqGezrwOPxUNccorXB/qSob26jpd6PZehYTg89TQ6WIvZzaLHuTRyxT8xXHB4G
      +rqwLItQZx9NdTUMDdmPi2hZHa/fjZpVbYvx3mM3naW7r5foun2XLgCyg+Gz56htCtLVXLiy
      VXxjhR3VJJXcpVApoJ6BIQI+H26vn+Hhfrxud/55C5KToeF+MEw2Eikeu3IFPbPX3V0VBrg3
      ucRUM8jeeoY66glv53nYtQzGxyboP/sQdT4Xyd0d1Gz+zoHsbpS51QQXzw4VnsRynxbZ6aEr
      1MJmNE2d32m7T3wnw4UL50jG7dM67v98y1CJpSwaAgV+dR0+Hrp4ESm1XbCqM0B/fx+J6BZO
      b3Gl2tKxdVx1IeQijo3b46GptZ0Gp0G6wMSyqfExQn0jNLgNxqeWOHf+HI48v2r3HxeHZbCb
      SaPtD5xXhQHWl+dRNZWVaJrWWidhzUtPg/tDYy3TxMJkemIMV30nxvYaoa78M7gNw0DL7jI+
      PU94bZG0prK0nD9ffXN1gYymsri6SSq5Q13nIK1++97oocFepqbm6Rss8Gue2mYlts36wgKq
      rtPd01PgmgGKIrM0O0l9Z29RqRK6miWtwrkzA0VEQ9Zy099ZXOFiX2M7tXIKaluxOyR7FweT
      hZlJookkpqkxPjmdd4UgU00yuxImGl6jq6+f5dk5evv3juX/BxF5XXrjOji/AAAAAElFTkSu
      QmCC
    </thumbnail>
    <thumbnail height='192' name='Supply vs Demand Chart (Q3)' width='192'>
      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
      YII=
    </thumbnail>
  </thumbnails>
</workbook>
